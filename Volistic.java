import java.util.*;

// Let start over again:
/*
 * Hello friends!
 * Here, you can change the code however you want,
 * Lines that start with '#' is a command, press Ccommand + Shift + P adn then type the following command!
 * 
 * If you want to publish the changes you made:
 * # Git: Commit
 * # Git: Push
 * 
 * Also, don't forget to Fetch frequently
 * # Git: Fetch
 */

public class Volistic {
    public static void main(String[] args) {
        class ansiColor {
            static final String RESET = "\u001B[0m";
            static final String RED = "\u001B[31m";
            static final String GREEN = "\u001B[32m";
            static final String YELLOW = "\u001B[33m";
            static final String PURPLE = "\u001B[35m";
            static final String CYAN = "\u001B[36m";
            static final String WHITE = "\u001B[37m";
            static String[] colors = {RED, GREEN, YELLOW, PURPLE, CYAN, WHITE};
        }
        Scanner input = new Scanner(System.in);
        class Main {
            private static String[][] programs = {
                { "Coffee Shop", "BMI Calculator", "Two Variable Calculator (NEW)", "Sleep Duration Calculator (NEW)", "Morse Code Translator (NEW)" },
                { "1.0"        , "1.0.1"         , "1.0"                          , "1.0"                             , "1.0"                        } };
            private static String[][] contributors = {
            //  | Main Contributor | Others (1)       |
                { "Deffreus Theda"                    }, // Coffee Shop
                { "Deffreus Theda"                    }, // BMI Calculator
                { "Deffreus Theda"                    }, // Two Variable Calculator
                { "Tristan"        , "Deffreus Theda" }, // Sleep Duration Calculator
                { "Anton"          , "Deffreus Theda" }, // Morse Code Translator
            };

            static void quit(int second) {
                System.out.println("\nQuitting in:");
                for (int i = second; i > 0; i--) {
                    System.out.println(i + "...");
                    try {
                        Thread.sleep(1000);
                    } catch (Exception e) {
                        Main.pExcType("Thread sleep error");
                    }
                }
                Main.clear();
                System.exit(1);
            }
            public static void clear() {
                System.out.print("\033[H\033[2J");
                System.out.flush();
            }
            static int getProgramsCount() {
                return programs[0].length;
            }
            static void hr() {
                System.out.println("================================================================================");
            }
            static String getProgramsName(int index) {
                return programs[0][index];
            }
            static void pBanner() {
                String[] banners = {
                        "__     __   ___    _       ___   ____    _____   ___    ____ \n" + //
                        "\\ \\   / /  / _ \\  | |     |_ _| / ___|  |_   _| |_ _|  / ___|\n" + //
                        " \\ \\ / /  | | | | | |      | |  \\___ \\    | |    | |  | |    \n" + //
                        "  \\ V /   | |_| | | |___   | |   ___) |   | |    | |  | |___ \n" + //
                        "   \\_/     \\___/  |_____| |___| |____/    |_|   |___|  \\____|\n" + //
                        "",
                        " __   __            _       _              _        _      ___   \n" + //
                        " \\ \\ / /   ___     | |     (_)     ___    | |_     (_)    / __|  \n" + //
                        "  \\ V /   / _ \\    | |     | |    (_-<    |  _|    | |   | (__   \n" + //
                        "  _\\_/_   \\___/   _|_|_   _|_|_   /__/_   _\\__|   _|_|_   \\___|  \n" + //
                        "_| \"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"| \n" + //
                        "\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-' \n" + //
                        "",
                        "____   ____    .__  .__          __  .___________  \n" + //
                        "\\   \\ /   /___ |  | |__| _______/  |_|__\\_   ___ \\ \n" + //
                        " \\   Y   /  _ \\|  | |  |/  ___/\\   __\\  /    \\  \\/ \n" + //
                        "  \\     (  <_> )  |_|  |\\___ \\  |  | |  \\     \\____\n" + //
                        "   \\___/ \\____/|____/__/____  > |__| |__|\\______  /\n" + //
                        "                            \\/                  \\/ \n" + //
                        "",
                        " __     __    U  ___ u   _                 ____     _____                ____  \n" + //
                        " \\ \\   /\"/u    \\/\"_ \\/  |\"|        ___    / __\"| u |_ \" _|     ___    U /\"___| \n" + //
                        "  \\ \\ / //     | | | |U | | u     |_\"_|  <\\___ \\/    | |      |_\"_|   \\| | u   \n" + //
                        "  /\\ V /_,-.-,_| |_| | \\| |/__     | |    u___) |   /| |\\      | |     | |/__  \n" + //
                        " U  \\_/-(_/ \\_)-\\___/   |_____|  U/| |\\u  |____/>> u |_|U    U/| |\\u    \\____| \n" + //
                        "   //            \\\\     //  \\\\.-,_|___|_,-.)(  (__)_// \\\\_.-,_|___|_,-._// \\\\  \n" + //
                        "  (__)          (__)   (_\")(\"_)\\_)-' '-(_/(__)    (__) (__)\\_)-' '-(_/(__)(__) \n" + //
                        "",
                        "      (`-.                                    .-')    .-') _                     \n" + //
                        "    _(OO  )_                                 ( OO ). (  OO) )                    \n" + //
                        ",--(_/   ,. \\ .-'),-----.  ,--.      ,-.-') (_)---\\_)/     '._ ,-.-')   .-----.  \n" + //
                        "\\   \\   /(__/( OO'  .-.  ' |  |.-')  |  |OO)/    _ | |'--...__)|  |OO) '  .--./  \n" + //
                        " \\   \\ /   / /   |  | |  | |  | OO ) |  |  \\\\  :` `. '--.  .--'|  |  \\ |  |('-.  \n" + //
                        "  \\   '   /, \\_) |  |\\|  | |  |`-' | |  |(_/ '..`''.)   |  |   |  |(_//_) |OO  ) \n" + //
                        "   \\     /__)  \\ |  | |  |(|  '---.',|  |_.'.-._)   \\   |  |  ,|  |_.'||  |`-'|  \n" + //
                        "    \\   /       `'  '-'  ' |      |(_|  |   \\       /   |  | (_|  |  (_'  '--'\\  \n" + //
                        "     `-'          `-----'  `------'  `--'    `-----'    `--'   `--'     `-----'  \n" + //
                        "",
                        "      (`-')                      _      (`-').->(`-')      _                \n" + //
                        "     _(OO )     .->      <-.    (_)     ( OO)_  ( OO).->  (_)     _         \n" + //
                        ",--.(_/,-.\\(`-')----.  ,--. )   ,-(`-')(_)--\\_) /    '._  ,-(`-') \\-,-----. \n" + //
                        "\\   \\ / (_/( OO).-.  ' |  (`-') | ( OO)/    _ / |'--...__)| ( OO)  |  .--./ \n" + //
                        " \\   /   / ( _) | |  | |  |OO ) |  |  )\\_..`--. `--.  .--'|  |  ) /_) (`-') \n" + //
                        "_ \\     /_) \\|  |)|  |(|  '__ |(|  |_/ .-._)   \\   |  |  (|  |_/  ||  |OO ) \n" + //
                        "\\-'\\   /     '  '-'  ' |     |' |  |'->\\       /   |  |   |  |'->(_'  '--'\\ \n" + //
                        "    `-'       `-----'  `-----'  `--'    `-----'    `--'   `--'      `-----' \n" + //
                        "",
                        "██╗   ██╗ ██████╗ ██╗     ██╗███████╗████████╗██╗ ██████╗\n" + //
                        "██║   ██║██╔═══██╗██║     ██║██╔════╝╚══██╔══╝██║██╔════╝\n" + //
                        "██║   ██║██║   ██║██║     ██║███████╗   ██║   ██║██║     \n" + //
                        "╚██╗ ██╔╝██║   ██║██║     ██║╚════██║   ██║   ██║██║     \n" + //
                        " ╚████╔╝ ╚██████╔╝███████╗██║███████║   ██║   ██║╚██████╗\n" + //
                        "  ╚═══╝   ╚═════╝ ╚══════╝╚═╝╚══════╝   ╚═╝   ╚═╝ ╚═════╝\n" + //
                        "                                                         \n" + //
                        "",
                        "██    ██  ██████  ██      ██ ███████ ████████ ██  ██████ \n" + //
                        "██    ██ ██    ██ ██      ██ ██         ██    ██ ██      \n" + //
                        "██    ██ ██    ██ ██      ██ ███████    ██    ██ ██      \n" + //
                        " ██  ██  ██    ██ ██      ██      ██    ██    ██ ██      \n" + //
                        "  ████    ██████  ███████ ██ ███████    ██    ██  ██████ \n" + //
                        "                                                         \n" + //
                        "                                                         \n" + //
                        "",
                        " ██▒   █▓ ▒█████   ██▓     ██▓  ██████ ▄▄▄█████▓ ██▓ ▄████▄  \n" + //
                        "▓██░   █▒▒██▒  ██▒▓██▒    ▓██▒▒██    ▒ ▓  ██▒ ▓▒▓██▒▒██▀ ▀█  \n" + //
                        " ▓██  █▒░▒██░  ██▒▒██░    ▒██▒░ ▓██▄   ▒ ▓██░ ▒░▒██▒▒▓█    ▄ \n" + //
                        "  ▒██ █░░▒██   ██░▒██░    ░██░  ▒   ██▒░ ▓██▓ ░ ░██░▒▓▓▄ ▄██▒\n" + //
                        "   ▒▀█░  ░ ████▓▒░░██████▒░██░▒██████▒▒  ▒██▒ ░ ░██░▒ ▓███▀ ░\n" + //
                        "   ░ ▐░  ░ ▒░▒░▒░ ░ ▒░▓  ░░▓  ▒ ▒▓▒ ▒ ░  ▒ ░░   ░▓  ░ ░▒ ▒  ░\n" + //
                        "   ░ ░░    ░ ▒ ▒░ ░ ░ ▒  ░ ▒ ░░ ░▒  ░ ░    ░     ▒ ░  ░  ▒   \n" + //
                        "     ░░  ░ ░ ░ ▒    ░ ░    ▒ ░░  ░  ░    ░       ▒ ░░        \n" + //
                        "      ░      ░ ░      ░  ░ ░        ░            ░  ░ ░      \n" + //
                        "     ░                                              ░        \n" + //
                        "",
                        " ▄█    █▄   ▄██████▄   ▄█        ▄█     ▄████████     ███      ▄█   ▄████████ \n" + //
                        "███    ███ ███    ███ ███       ███    ███    ███ ▀█████████▄ ███  ███    ███ \n" + //
                        "███    ███ ███    ███ ███       ███▌   ███    █▀     ▀███▀▀██ ███▌ ███    █▀  \n" + //
                        "███    ███ ███    ███ ███       ███▌   ███            ███   ▀ ███▌ ███        \n" + //
                        "███    ███ ███    ███ ███       ███▌ ▀███████████     ███     ███▌ ███        \n" + //
                        "███    ███ ███    ███ ███       ███           ███     ███     ███  ███    █▄  \n" + //
                        "███    ███ ███    ███ ███▌    ▄ ███     ▄█    ███     ███     ███  ███    ███ \n" + //
                        " ▀██████▀   ▀██████▀  █████▄▄██ █▀    ▄████████▀     ▄████▀   █▀   ████████▀  \n" + //
                        "                      ▀                                                       \n" + //
                        "",
                        " ▌ ▐·      ▄▄▌  ▪  .▄▄ · ▄▄▄▄▄▪   ▄▄· \n" + //
                        "▪█·█▌▪     ██•  ██ ▐█ ▀. •██  ██ ▐█ ▌▪\n" + //
                        "▐█▐█• ▄█▀▄ ██▪  ▐█·▄▀▀▀█▄ ▐█.▪▐█·██ ▄▄\n" + //
                        " ███ ▐█▌.▐▌▐█▌▐▌▐█▌▐█▄▪▐█ ▐█▌·▐█▌▐███▌\n" + //
                        ". ▀   ▀█▄▀▪.▀▀▀ ▀▀▀ ▀▀▀▀  ▀▀▀ ▀▀▀·▀▀▀ \n" + //
                        "",
                        " ▄▀▀▄ ▄▀▀▄  ▄▀▀▀▀▄   ▄▀▀▀▀▄     ▄▀▀█▀▄   ▄▀▀▀▀▄  ▄▀▀▀█▀▀▄  ▄▀▀█▀▄    ▄▀▄▄▄▄  \n" + //
                        "█   █    █ █      █ █    █     █   █  █ █ █   ▐ █    █  ▐ █   █  █  █ █    ▌ \n" + //
                        "▐  █    █  █      █ ▐    █     ▐   █  ▐    ▀▄   ▐   █     ▐   █  ▐  ▐ █      \n" + //
                        "   █   ▄▀  ▀▄    ▄▀     █          █    ▀▄   █     █          █       █      \n" + //
                        "    ▀▄▀      ▀▀▀▀     ▄▀▄▄▄▄▄▄▀ ▄▀▀▀▀▀▄  █▀▀▀    ▄▀        ▄▀▀▀▀▀▄   ▄▀▄▄▄▄▀ \n" + //
                        "                      █        █       █ ▐      █         █       █ █     ▐  \n" + //
                        "                      ▐        ▐       ▐        ▐         ▐       ▐ ▐        \n" + //
                        "",
                        "    ▄   ████▄ █    ▄█    ▄▄▄▄▄      ▄▄▄▄▀ ▄█ ▄█▄    \n" + //
                        "     █  █   █ █    ██   █     ▀▄ ▀▀▀ █    ██ █▀ ▀▄  \n" + //
                        "█     █ █   █ █    ██ ▄  ▀▀▀▀▄       █    ██ █   ▀  \n" + //
                        " █    █ ▀████ ███▄ ▐█  ▀▄▄▄▄▀       █     ▐█ █▄  ▄▀ \n" + //
                        "  █  █            ▀ ▐              ▀       ▐ ▀███▀  \n" + //
                        "   █▐                                               \n" + //
                        "   ▐                                                \n" + //
                        "",
                        "'##::::'##::'#######::'##:::::::'####::'######::'########:'####::'######::\n" + //
                        " ##:::: ##:'##.... ##: ##:::::::. ##::'##... ##:... ##..::. ##::'##... ##:\n" + //
                        " ##:::: ##: ##:::: ##: ##:::::::: ##:: ##:::..::::: ##::::: ##:: ##:::..::\n" + //
                        " ##:::: ##: ##:::: ##: ##:::::::: ##::. ######::::: ##::::: ##:: ##:::::::\n" + //
                        ". ##:: ##:: ##:::: ##: ##:::::::: ##:::..... ##:::: ##::::: ##:: ##:::::::\n" + //
                        ":. ## ##::: ##:::: ##: ##:::::::: ##::'##::: ##:::: ##::::: ##:: ##::: ##:\n" + //
                        "::. ###::::. #######:: ########:'####:. ######::::: ##::::'####:. ######::\n" + //
                        ":::...::::::.......:::........::....:::......::::::..:::::....:::......:::\n" + //
                        "",
                        "01010110 01101111 01101100 01101001 01110011 01110100 01101001 01000011 \n" + //
                        "",
                        " _|      _|            _|  _|              _|      _|    _|_|_|  \n" + //
                        " _|      _|    _|_|    _|        _|_|_|  _|_|_|_|      _|        \n" + //
                        " _|      _|  _|    _|  _|  _|  _|_|        _|      _|  _|        \n" + //
                        "   _|  _|    _|    _|  _|  _|      _|_|    _|      _|  _|        \n" + //
                        "     _|        _|_|    _|  _|  _|_|_|        _|_|  _|    _|_|_|  \n" + //
                        "",
                        "     ***** *      **              ***                                                * ***    \n" + //
                        "  ******  *    *****               ***      *                    *       *         *  ****  * \n" + //
                        " **   *  *       *****              **     ***                  **      ***       *  *  ****  \n" + //
                        "*    *  **       * **               **      *                   **       *       *  **   **   \n" + //
                        "    *  ***      *         ****      **               ****     ********          *  ***        \n" + //
                        "   **   **      *        * ***  *   **    ***       * **** * ********  ***     **   **        \n" + //
                        "   **   **      *       *   ****    **     ***     **  ****     **      ***    **   **        \n" + //
                        "   **   **     *       **    **     **      **    ****          **       **    **   **        \n" + //
                        "   **   **     *       **    **     **      **      ***         **       **    **   **        \n" + //
                        "   **   **     *       **    **     **      **        ***       **       **    **   **        \n" + //
                        "    **  **    *        **    **     **      **          ***     **       **     **  **        \n" + //
                        "     ** *     *        **    **     **      **     ****  **     **       **      ** *      *  \n" + //
                        "      ***     *         ******      **      **    * **** *      **       **       ***     *   \n" + //
                        "       *******           ****       *** *   *** *    ****        **      *** *     *******    \n" + //
                        "         ***                         ***     ***                          ***        ***      \n" + //
                        "",
                        ":::      .::.  ...      :::     ::: .::::::.:::::::::::::::  .,-:::::  \n" + //
                        "';;,   ,;;;'.;;;;;;;.   ;;;     ;;;;;;`    `;;;;;;;;'''';;;,;;;'````'  \n" + //
                        " \\[[  .[[/ ,[[     \\[[, [[[     [[['[==/[[[[,    [[     [[[[[[         \n" + //
                        "  Y$c.$$\"  $$$,     $$$ $$'     $$$  '''    $    $$     $$$$$$         \n" + //
                        "   Y88P    \"888,_ _,88Po88oo,.__888 88b    dP    88,    888`88bo,__,o, \n" + //
                        "    MP       \"YMMMMMP\" \"\"\"\"YUMMMMMM  \"YMmMY\"     MMM    MMM  \"YUMMMMMP\"\n" + //
                        "",
                        " _    _  _____         _____ _______ _______ _____ _______\n" + //
                        "  \\  /  |     | |        |   |______    |      |   |      \n" + //
                        "   \\/   |_____| |_____ __|__ ______|    |    __|__ |_____ \n" + //
                        "                                                          \n" + //
                        "",
                        "86 111 108 105 115 116 105 67 \n" + //
                        "",
                        "                 :                                                       \n" + //
                        "                t#,                               .                    .,\n" + //
                        "               ;##W.             i   t           ;W          t        ,Wt\n" + //
                        "              :#L:WE            LE   Ej         f#E GEEEEEEELEj      i#D.\n" + //
                        "  t      .DD..KG  ,#D          L#E   E#,      .E#f  ,;;L#K;;.E#,    f#f  \n" + //
                        "  EK:   ,WK. EE    ;#f        G#W.   E#t     iWW;      t#E   E#t  .D#i   \n" + //
                        "  E#t  i#D  f#.     t#i      D#K.    E#t    L##Lffi    t#E   E#t :KW,    \n" + //
                        "  E#t j#f   :#G     GK      E#K.     E#t   tLLG##L     t#E   E#t t#f     \n" + //
                        "  E#tL#i     ;#L   LW.    .E#E.      E#t     ,W#i      t#E   E#t  ;#G    \n" + //
                        "  E#WW,       t#f f#:    .K#E        E#t    j#E.       t#E   E#t   :KE.  \n" + //
                        "  E#K:         f#D#;    .K#D         E#t  .D#j         t#E   E#t    .DW: \n" + //
                        "  ED.           G#t    .W#G          E#t ,WK,          t#E   E#t      L#,\n" + //
                        "  t              t    :W##########Wt E#t EG.            fE   E#t       jt\n" + //
                        "                      :,,,,,,,,,,,,,.,;. ,               :   ,;.         \n" + //
                        "",
                        "    _           _               _  _        _                    _           _       _  _  _       \n" + //
                        "   (_)         (_)             (_)(_)      (_)                  (_)         (_)   _ (_)(_)(_) _    \n" + //
                        "   (_)         (_)   _  _  _      (_)    _  _     _  _  _  _  _ (_) _  _  _  _   (_)         (_)   \n" + //
                        "   (_)_       _(_)_ (_)(_)(_) _   (_)   (_)(_)  _(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)  (_)               \n" + //
                        "     (_)     (_) (_)         (_)  (_)      (_) (_)_  _  _  _    (_)         (_)  (_)               \n" + //
                        "      (_)   (_)  (_)         (_)  (_)      (_)   (_)(_)(_)(_)_  (_)     _   (_)  (_)          _    \n" + //
                        "       (_)_(_)   (_) _  _  _ (_)_ (_) _  _ (_) _  _  _  _  _(_) (_)_  _(_)_ (_) _(_) _  _  _ (_)   \n" + //
                        "         (_)        (_)(_)(_)  (_)(_)(_)(_)(_)(_)(_)(_)(_)(_)     (_)(_) (_)(_)(_)  (_)(_)(_)      \n" + //
                        "",
                        "                     ,,    ,,                   ,,             \n" + //
                        "`7MMF'   `7MF'     `7MM    db            mm     db   .g8\"\"\"bgd \n" + //
                        "  `MA     ,V         MM                  MM        .dP'     `M \n" + //
                        "   VM:   ,V ,pW\"Wq.  MM  `7MM  ,pP\"Ybd mmMMmm `7MM dM'       ` \n" + //
                        "    MM.  M'6W'   `Wb MM    MM  8I   `\"   MM     MM MM          \n" + //
                        "    `MM A' 8M     M8 MM    MM  `YMMMa.   MM     MM MM.         \n" + //
                        "     :MM;  YA.   ,A9 MM    MM  L.   I8   MM     MM `Mb.     ,' \n" + //
                        "      VF    `Ybmd9'.JMML..JMML.M9mmmP'   `Mbmo.JMML. `\"bmmmd'  \n" + //
                        "",
                        "     .-.     .-./(   .')      .'(    )\\.--.  .-,.-.,-. .'(     )\\.-.  \n" + //
                        " ,'  /  )  ,'     ) ( /       \\  )  (   ._.' ) ,, ,. ( \\  )  ,' ,-,_) \n" + //
                        "(  ) | (  (  .-, (   ))       ) (    `-.`.   \\( |(  )/ ) (  (  .   _  \n" + //
                        " ) './ /   ) '._\\ )  )'._.-.  \\  )  ,_ (  \\     ) \\    \\  )  ) '..' ) \n" + //
                        "(  ,  (   (  ,   (  (       )  ) \\ (  '.)  )    \\ (     ) \\ (  ,   (  \n" + //
                        " )/..'     )/ ._.'   )/,__.'    )/  '._,_.'      )/      )/  )/'._.'  \n" + //
                        "",
                        "   _  _            __  __             _     __    ___   \n" + //
                        "  FJ  L]   ____    LJ  LJ    ____    FJ_    LJ  ,\"___\". \n" + //
                        " J |  | L F __ J   FJ       F ___J  J  _|       FJ---L] \n" + //
                        " J J  F L| |--| | J  L FJ  | '----_ | |-'   FJ J |   LJ \n" + //
                        " J\\ \\/ /FF L__J J J  LJ  L )-____  LF |__-.J  L| \\___--.\n" + //
                        "  \\\\__//J\\______/FJ__LJ__LJ\\______/F\\_____/J__LJ\\_____/F\n" + //
                        "   \\__/  J______F |__||__| J______F J_____F|__| J_____F \n" + //
                        "",
                        "56 6F 6C 69 73 74 69 43 \n" + //
                        "",
                        " __     __    _ _     _   _  ____ \n" + //
                        " \\ \\   / /__ | (_)___| |_(_)/ ___|\n" + //
                        "  \\ \\ / / _ \\| | / __| __| | |    \n" + //
                        "   \\ V / (_) | | \\__ \\ |_| | |___ \n" + //
                        "    \\_/ \\___/|_|_|___/\\__|_|\\____|\n" + //
                        "",
                        "o     o        8  o          o   o .oPYo. \n" + //
                        "8     8        8             8     8    8 \n" + //
                        "8     8 .oPYo. 8 o8 .oPYo.  o8P o8 8      \n" + //
                        "`b   d' 8    8 8  8 Yb..     8   8 8      \n" + //
                        " `b d'  8    8 8  8   'Yb.   8   8 8    8 \n" + //
                        "  `8'   `YooP' 8  8 `YooP'   8   8 `YooP' \n" + //
                        ":::..::::.....:..:..:.....:::..::..:.....:\n" + //
                        "::::::::::::::::::::::::::::::::::::::::::\n" + //
                        "::::::::::::::::::::::::::::::::::::::::::\n" + //
                        "",
                        "           #   #              ######   ##########      #       ######       #      \n" + //
                        "           #   #   ######       #      #        #   #######      #      ########## \n" + //
                        "  ######   #   #       #    ##########         #     # #     ########## #        # \n" + //
                        "           #   #      #         #             #      # #         #             ##  \n" + //
                        "              #       #         #            #    ##########     #           ##    \n" + //
                        "##########   #   ##########     #          ##          #         #         ##      \n" + //
                        "           ##                    ####    ##            #          ####   ##        \n" + //
                        "",
                        " __  __          ___                 __        ____      \n" + //
                        "/\\ \\/\\ \\        /\\_ \\    __         /\\ \\__  __/\\  _`\\    \n" + //
                        "\\ \\ \\ \\ \\    ___\\//\\ \\  /\\_\\    ____\\ \\ ,_\\/\\_\\ \\ \\/\\_\\  \n" + //
                        " \\ \\ \\ \\ \\  / __`\\\\ \\ \\ \\/\\ \\  /',__\\\\ \\ \\/\\/\\ \\ \\ \\/_/_ \n" + //
                        "  \\ \\ \\_/ \\/\\ \\L\\ \\\\_\\ \\_\\ \\ \\/\\__, `\\\\ \\ \\_\\ \\ \\ \\ \\L\\ \\\n" + //
                        "   \\ `\\___/\\ \\____//\\____\\\\ \\_\\/\\____/ \\ \\__\\\\ \\_\\ \\____/\n" + //
                        "    `\\/__/  \\/___/ \\/____/ \\/_/\\/___/   \\/__/ \\/_/\\/___/ \n" + //
                        "",
                        "  _/      _/            _/  _/              _/      _/    _/_/_/   \n" + //
                        " _/      _/    _/_/    _/        _/_/_/  _/_/_/_/      _/          \n" + //
                        "_/      _/  _/    _/  _/  _/  _/_/        _/      _/  _/           \n" + //
                        " _/  _/    _/    _/  _/  _/      _/_/    _/      _/  _/            \n" + //
                        "  _/        _/_/    _/  _/  _/_/_/        _/_/  _/    _/_/_/       \n" + //
                        "",
                        "...- --- .-.. .. ... - .. -.-. \n" + //
                        "",
                        "####   ###  ##### #   #  #### ##### #   # #   # \n" + //
                        "#   # #   #  #  # #  ## #       #   #  ## #   # \n" + //
                        "####  #   #  #  # # # # #       #   # # #  #### \n" + //
                        "#   # #   #  #  # ##  # #       #   ##  #     # \n" + //
                        "####   ###  #   # #   #  ####   #   #   #     # \n" + //
                        "",
                        " ,ggg,         ,gg                                                ,gggg,  \n" + //
                        "dP\"\"Y8a       ,8P          ,dPYb,                  I8           ,88\"\"\"Y8b,\n" + //
                        "Yb, `88       d8'          IP'`Yb                  I8          d8\"     `Y8\n" + //
                        " `\"  88       88           I8  8I  gg           88888888 gg   d8'   8b  d8\n" + //
                        "     88       88           I8  8'  \"\"              I8    \"\"  ,8I    \"Y88P'\n" + //
                        "     I8       8I ,ggggg,   I8 dP   gg     ,g,      I8    gg  I8'          \n" + //
                        "     `8,     ,8'dP\"  \"Y8gggI8dP    88    ,8'8,     I8    88  d8           \n" + //
                        "      Y8,   ,8Pi8'    ,8I  I8P     88   ,8'  Yb   ,I8,   88  Y8,          \n" + //
                        "       Yb,_,dP,d8,   ,d8' ,d8b,_ _,88,_,8'_   8) ,d88b,_,88,_`Yba,,_____, \n" + //
                        "        \"Y8P\" P\"Y8888P\"   8P'\"Y888P\"\"Y8P' \"YY8P8P8P\"\"Y88P\"\"Y8  `\"Y8888888 \n" + //
                        "",
                        "ooooo  oooo          o888  o88                o8   o88    oooooooo8 \n" + //
                        " 888    88  ooooooo   888  oooo   oooooooo8 o888oo oooo o888     88 \n" + //
                        "  888  88 888     888 888   888  888ooooooo  888    888 888         \n" + //
                        "   88888  888     888 888   888          888 888    888 888o     oo \n" + //
                        "    888     88ooo88  o888o o888o 88oooooo88   888o o888o 888oooo88  \n" + //
                        "",
                        "126 157 154 151 163 164 151 103 \n" + //
                        "",
                        "/^^         /^^           /^^            /^^         /^^   \n" + //
                        " /^^       /^^            /^^ /^         /^^   /^ /^^   /^^\n" + //
                        "  /^^     /^^     /^^     /^^    /^^^^ /^/^ /^   /^^       \n" + //
                        "   /^^   /^^    /^^  /^^  /^^/^^/^^      /^^  /^^/^^       \n" + //
                        "    /^^ /^^    /^^    /^^ /^^/^^  /^^^   /^^  /^^/^^       \n" + //
                        "     /^^^^      /^^  /^^  /^^/^^    /^^  /^^  /^^ /^^   /^^\n" + //
                        "      /^^         /^^    /^^^/^^/^^ /^^   /^^ /^^   /^^^^  \n" + //
                        "",
                        "@@@  @@@   @@@@@@   @@@       @@@   @@@@@@   @@@@@@@  @@@   @@@@@@@  \n" + //
                        "@@@  @@@  @@@@@@@@  @@@       @@@  @@@@@@@   @@@@@@@  @@@  @@@@@@@@  \n" + //
                        "@@!  @@@  @@!  @@@  @@!       @@!  !@@         @@!    @@!  !@@       \n" + //
                        "!@!  @!@  !@!  @!@  !@!       !@!  !@!         !@!    !@!  !@!       \n" + //
                        "@!@  !@!  @!@  !@!  @!!       !!@  !!@@!!      @!!    !!@  !@!       \n" + //
                        "!@!  !!!  !@!  !!!  !!!       !!!   !!@!!!     !!!    !!!  !!!       \n" + //
                        ":!:  !!:  !!:  !!!  !!:       !!:       !:!    !!:    !!:  :!!       \n" + //
                        " ::!!:!   :!:  !:!   :!:      :!:      !:!     :!:    :!:  :!:       \n" + //
                        "  ::::    ::::: ::   :: ::::   ::  :::: ::      ::     ::   ::: :::  \n" + //
                        "   :       : :  :   : :: : :  :    :: : :       :     :     :: :: :  \n" + //
                        "",
                        "====================================================\n" + //
                        "=  ====  =========  =========================     ==\n" + //
                        "=  ====  =========  ========================  ===  =\n" + //
                        "=  ====  =========  ==============  =======  =======\n" + //
                        "=  ====  ===   ===  ==  ===   ===    ==  ==  =======\n" + //
                        "=   ==   ==     ==  ======  =  ===  =======  =======\n" + //
                        "==  ==  ===  =  ==  ==  ===  =====  ===  ==  =======\n" + //
                        "==  ==  ===  =  ==  ==  ====  ====  ===  ==  =======\n" + //
                        "===    ====  =  ==  ==  ==  =  ===  ===  ===  ===  =\n" + //
                        "====  ======   ===  ==  ===   ====   ==  ====     ==\n" + //
                        "====================================================\n" + //
                        "",
                        "oooooo     oooo           oooo   o8o               .    o8o    .oooooo.   \n" + //
                        " `888.     .8'            `888   `\"'             .o8    `\"'   d8P'  `Y8b  \n" + //
                        "  `888.   .8'    .ooooo.   888  oooo   .oooo.o .o888oo oooo  888          \n" + //
                        "   `888. .8'    d88' `88b  888  `888  d88(  \"8   888   `888  888          \n" + //
                        "    `888.8'     888   888  888   888  `\"Y88b.    888    888  888          \n" + //
                        "     `888'      888   888  888   888  o.  )88b   888 .  888  `88b    ooo  \n" + //
                        "      `8'       `Y8bod8P' o888o o888o 8\"\"888P'   \"888\" o888o  `Y8bood8P'  \n" + //
                        "",
                        "  dMP dMP .aMMMb  dMP     dMP .dMMMb dMMMMMMP dMP .aMMMb \n" + //
                        " dMP dMP dMP\"dMP dMP     amr dMP\" VP   dMP   amr dMP\"VMP \n" + //
                        "dMP dMP dMP dMP dMP     dMP  VMMMb    dMP   dMP dMP      \n" + //
                        "YMvAP\" dMP.aMP dMP     dMP dP .dMP   dMP   dMP dMP.aMP   \n" + //
                        " VP\"   VMMMP\" dMMMMMP dMP  VMMMP\"   dMP   dMP  VMMMP\"    \n" + //
                        "",
                        " ____ ____ ____ ____ ____ ____ ____ ____ \n" + //
                        "||V |||o |||l |||i |||s |||t |||i |||C ||\n" + //
                        "||__|||__|||__|||__|||__|||__|||__|||__||\n" + //
                        "|/__\\|/__\\|/__\\|/__\\|/__\\|/__\\|/__\\|/__\\|\n" + //
                        "",
                        "___    __     __________       ___________________\n" + //
                        "__ |  / /________  /__(_)________  /___(_)_  ____/\n" + //
                        "__ | / /_  __ \\_  /__  /__  ___/  __/_  /_  /     \n" + //
                        "__ |/ / / /_/ /  / _  / _(__  )/ /_ _  / / /___   \n" + //
                        "_____/  \\____//_/  /_/  /____/ \\__/ /_/  \\____/   \n" + //
                        "",
                        "`Yb                .dP\"Yb                                                   \n" + //
                        " 88              dP'   d'              db                      db           \n" + //
                        " 88                                                                         \n" + //
                        " 88 d88b d88b      'Yb    `Y8888888b. 'Yb .d888b.  `Yb.d888b  'Yb .dP'  dP' \n" + //
                        " 88P   8Y   8b      88       .dP'      88 8'   `Yb  88'    8Y  88 88    88  \n" + //
                        " 88    8P   88      88     ,dP         88 Yb.   88  88     8P  88 Y8   .88  \n" + //
                        " 88  .dP' .dP'     .8P     88     .   .8P     .dP   88   ,dP  .8P `Y88P'88  \n" + //
                        " 8888888888888b.           `Yb...dP         .dP'    88                  88  \n" + //
                        "                             `\"\"\"'        .dP'      88                  88  \n" + //
                        "                                                   .8P                  Y8. \n" + //
                        "",
                        "o   o     o        o      o-o \n" + //
                        "|   |     | o      |  o  /    \n" + //
                        "o   o o-o |   o-o -o-   O     \n" + //
                        " \\ /  | | | |  \\   |  |  \\    \n" + //
                        "  o   o-o o | o-o  o  |   o-o \n" + //
                        "",
                        "O~~         O~~           O~~            O~~         O~~   \n" + //
                        " O~~       O~~            O~~ O~         O~~   O~ O~~   O~~\n" + //
                        "  O~~     O~~     O~~     O~~    O~~~~ O~O~ O~   O~~       \n" + //
                        "   O~~   O~~    O~~  O~~  O~~O~~O~~      O~~  O~~O~~       \n" + //
                        "    O~~ O~~    O~~    O~~ O~~O~~  O~~~   O~~  O~~O~~       \n" + //
                        "     O~~~~      O~~  O~~  O~~O~~    O~~  O~~  O~~ O~~   O~~\n" + //
                        "      O~~         O~~    O~~~O~~O~~ O~~   O~~ O~~   O~~~~  \n" + //
                        "",
                        " :::  === :::====  :::      ::: :::===  :::==== ::: :::=====\n" + //
                        " :::  === :::  === :::      ::: :::     :::==== ::: :::     \n" + //
                        " ===  === ===  === ===      ===  =====    ===   === ===     \n" + //
                        "  ======  ===  === ===      ===     ===   ===   === ===     \n" + //
                        "    ==     ======  ======== === ======    ===   ===  =======\n" + //
                        "",
                        "8b           d8            88  88                      88    ,ad8888ba,   \n" + //
                        "`8b         d8'            88  \"\"               ,d     \"\"   d8\"'    `\"8b  \n" + //
                        " `8b       d8'             88                   88         d8'            \n" + //
                        "  `8b     d8'  ,adPPYba,   88  88  ,adPPYba,  MM88MMM  88  88             \n" + //
                        "   `8b   d8'  a8\"     \"8a  88  88  I8[    \"\"    88     88  88             \n" + //
                        "    `8b d8'   8b       d8  88  88   `\"Y8ba,     88     88  Y8,            \n" + //
                        "     `888'    \"8a,   ,a8\"  88  88  aa    ]8I    88,    88   Y8a.    .a8P  \n" + //
                        "      `8'      `\"YbbdP\"'   88  88  `\"YbbdP\"'    \"Y888  88    `\"Y8888Y\"'   \n" + //
                        ""};
                int bannerSeed = (int) (Math.random()*(banners.length));
                int colorSeed = (int) (Math.random()*(ansiColor.colors.length));
                System.out.println(ansiColor.colors[colorSeed] + banners[bannerSeed]);
                System.out.println("\n -- Version 1.2.1 -- ");
                System.out.println("\nYou can contribute to this project here: https://github.com/PD-06/Volistic");
                System.out.println("Please report any bug here:\n    Discord    : deffreus" + ansiColor.RESET);
            }
            static void pMainMenu() {
                System.out.println("\nPrograms menu:");
                for (int i = 0; i < getProgramsCount(); i++) {
                    System.out.print((i + 1) + " = " + getProgramsName(i) + " (V" + programs[1][i] + ")" + " by ");
                    int ContributorCount = contributors[i].length;
                    // yang ini gausah dipahamin gpp, aku juga bingung
                    for(int j = 0; j < ContributorCount; j++) {
                        System.out.print(contributors[i][j]);
                        if(ContributorCount == 2) {
                            if(j == ContributorCount-2) {System.out.print(" & ");}
                        } else { 
                            if(j < ContributorCount-2) {System.out.print(", ");}
                            if(j == ContributorCount-2) {System.out.print(", & ");}
                        }
                    } System.out.print("\n");
                }
            }
            static void pExcType(String message) {
                System.out
                        .println(ansiColor.RED + "Main.pExcType: (ERROR: INVALID INPUT): " + message + ansiColor.RESET);
            }
            static String nospace(String string) {
                String res = string.replaceAll("\\s", "");
                return res;
            }
            static void pQuit() {
                System.out.println("\n(Type 'quit' or 'exit' to quit Volistic from this menu)");
            }
            static String nice(double valval) {
                int valint = (int) valval; String res = "";
                if(valint == valval) {res = Integer.toString(valint);}
                else {res = Double.toString(valval);}
                return res;
            }
        }

        class TwoVarCalculator {
            static Scanner tvcinput = new Scanner(System.in);
            static boolean tvcIsRunning, tvcIsEnded, operatorIsValid;
            private static String operator = "TRmSvJWbtu9FXgMBdtfEOt3e0e90Th2Z8u6SVZ0jB0aU4QSh0n";
            static double A, B;
            static int op;

            static void run() {
                tvcIsRunning = true;
                tvcIsEnded = false;
                while (tvcIsRunning) {
                    tvcIsRunning = false;
                    try {
                        Main.clear();
                        Main.hr();
                        pWelcome();
                        Main.hr();
                        iOperator();
                        if(!tvcIsEnded) {iA(); iB(); pRes(); iQuit();}
                        if(!tvcIsEnded) {tvcIsRunning = true;}
                    } catch (Exception e) {
                        Main.pExcType(ansiColor.RED + "CALCULATOR ERROR." + ansiColor.RESET);
                    }
                }
                pQuit(3);
            }
            static void pQuit(int seconds) {
                System.out.println("\nThank you so much for using the Volistic Two Variable Calculator!! :D");
                System.out.println("\nQuitting in:");
                for (int i = seconds; i > 0; i--) {
                    System.out.println(i + "...");
                    try {
                        Thread.sleep(1000); // wait for 1000 milisecond = 1 second
                    } catch (Exception e) {
                        Main.pExcType("Thread sleep exception, dev's fault");
                    }
                } 
            }
            static void iQuit() {
                String opt;
                boolean valid = false;
                while (valid != true) {
                    System.out.println("\nDo you want calculate again? (Y/n)");
                    opt = tvcinput.nextLine();
                    switch (opt) {
                        case "Y":
                        case "y":
                        case "Yes":
                        case "yes":
                        case "YES":
                        case "":
                            valid = true;
                            tvcIsEnded = false;
                            break;
                        case "n":
                        case "N":
                        case "No":
                        case "no":
                        case "NO":
                            valid = true;
                            tvcIsEnded = true;
                            break;
                        default:
                            Main.pExcType("Please enter yes or no!");
                    }
                }
            }
            static void pRes() {
                double resdouble = calc(operator);
                int resint = (int) calc(operator);
                if(resdouble == resint) {System.out.println("\nThe result of the calculation is: " + resint);}
                else {System.out.println("\nThe result of the calculation is: " + resdouble);}
            }
            static double calc(String val) {
                double result = 1;
                operatorIsValid = true;
                switch (val) {
                    case "1":
                    case "+":
                        op = 1;
                        result = A + B;
                        break;
                    case "2":
                    case "-":
                        op = 2;
                        result = A - B;
                        break;
                    case "3":
                    case "x":
                    case "*":
                        op = 3;
                        result = A * B;
                        break;
                    case "4":
                    case "/":
                        op = 4;
                        result = A / B;
                        break;
                    case "5":
                    case "^":
                    case "**":
                        op = 5;
                        for (int i = 0; i < B; i++)
                            result *= A;
                        break;
                    case "√":
                    case "6":
                        op = 6;
                        double exponent = 1 / B;
                        result = Math.pow(A, exponent);
                        break;
                    case "7":
                    case "%":
                        op = 7;
                        result = A % B;
                        break;
                    case "quit":
                    case "exit":   
                        tvcIsEnded = true;
                        break;
                    default:
                        operator = "TRmSvJWbtu9FXgMBdtfEOt3e0e90Th2Z8u6SVZ0jB0aU4QSh0n";
                        operatorIsValid = false;
                        break;
                }
                return result;
            }
            static void iB() {
                boolean BIsValid = false;
                while(!BIsValid) {
                    try {
                        System.out.println("\nPlease enter a value for the variable B: ");
                        B = Double.parseDouble(tvcinput.nextLine());
                        BIsValid = true;
                    } catch(Exception e) {
                        if(!tvcIsEnded) {Main.pExcType("Please enter a number for variable B!");}
                    }
                }
            }
            static void iA() {
                boolean AIsValid = false;
                while(!AIsValid) {
                    try {
                        System.out.println("\nPlease enter a value for the variable A: ");
                        A = Double.parseDouble(tvcinput.nextLine());
                        AIsValid = true;
                    } catch(Exception e) {
                        if(!tvcIsEnded) {Main.pExcType("Please enter a number for variable A!");}
                    }
                }
            }
            static void iOperator() {
                String calculations[][] = {
                    {"Symbol","Description"        ,"Name"          ,"Format" },
                    {"+"     ,"Increase A by B"    ,"Incrementation","(A + B)"},
                    {"-"     ,"Substract B from A" ,"Substraction"  ,"(A - B)"}, 
                    {"x"     ,"Multiply A and B"   ,"Multiplication","(A x B)"},
                    {"/"     ,"Divide A by B"      ,"Division"      ,"(A / B)"},
                    {"^"     ,"A to the Power of B","Exponentiation","(A^B)"  },
                    {"√"     ,"'B' root of A"      ,"Nth Root"      ,"(B√ A)" },
                    {"%"     ,"A modulo B"         ,"Modulus"       ,"(A % B)"}
                };
                System.out.println("\nWhat type of calculation you want?\n");
                for(int i = 1; i < calculations.length; i++) {System.out.printf("%s (%s) = %s\n", i, calculations[i][0], calculations[i][1]);}
                boolean keepAsking = true;
                while (keepAsking) {
                    keepAsking = true;
                    System.out.println("\n(Enter the index number or symbol):");
                    try {
                        operator = Main.nospace(tvcinput.nextLine());
                        calc(operator);
                        if(operatorIsValid) {keepAsking = false;}
                        else {Main.pExcType("Please enter the index number or symbol above!");}
                    } catch (Exception e) {
                        Main.pExcType("Please input a number or symbol!");
                        keepAsking = true;
                    }
                }
                if(!tvcIsEnded) {System.out.println("Selecting: " + calculations[op][2] + "... " + calculations[op][3]);}
            }
            static void pWelcome() {
                System.out.println("\nWelcome to the Volistic's Two Variable Calculator!");
                System.out.println("(Enter 'quit' or 'exit' to exit)\n");
            }
        }

        class BMICalculator {
            // Deklarasi variabel yang akan dipakai.
            static boolean bmirun, end, hasName;
            static String fname, category; // fname -> "Full Name"
            static Scanner bmiinput = new Scanner(System.in);
            static double weight, height, bmi;

            // Method buat jalanin bmi kalkulatornya
            static void run() {
                bmirun = true;
                end = false;
                // Biar bisa ngulang-ulang kalkulasi BMI
                while (bmirun) {
                    bmirun = false;
                    // 'try': kalau ada error (Exception) di sebuah line of code, langsung lompat ke 'catch'
                    try {
                        Main.clear(); // clear terminal
                        Main.hr(); // print horizontal line
                        // perhatiin penamaan methodnya: pWelcome -> "Print Welcome", iName -> "Input Name"
                        pWelcome();
                        Main.hr();
                        iName();
                        if (fname != "") // kalau namanya nggak kosong
                            hasName = true;
                        if (hasName) {System.out.println("\nHello " + fname + "!");} // kamu bisa lo nulis if begini
                        iWeight();
                        iHeight();
                        calcBMI(weight, height); // method ini pakai 'parameter': weight & height, buat dipakai di method 'calcBMI' nya
                        pResult();
                        iQuit();
                        if (end == false) {bmirun = true;} // kamu bisa lo nulis if begini
                    } catch (Exception e) { // ini catch!
                        Main.pExcType(
                                "You're not supposed to see this message.\nIf you do, report with a screenshot and how to replicate it here: deffreus (Discord)");
                        bmirun = true; // biar ngulang
                    }
                }
            }
            // timer buat quitting aja
            static void pQuit(int intSecond) {
                System.out.println("\nQuitting in:");
                for (int i = intSecond; i > 0; i--) {
                    System.out.println(i + "...");
                    try {
                        Thread.sleep(1000); // wait for 1000 milisecond = 1 second
                    } catch (Exception e) {
                        Main.pExcType("Thread sleep exception, dev's fault");
                    }
                }
            }
            // jujur ini kurang sih:
            static void iQuit() {
                System.out.println("\nDo you want to calculate again? (Y/n):");
                String option = bmiinput.nextLine();
                switch (option) {
                    case "N":
                    case "n":
                    case "No":
                    case "no":
                    case "NO":
                        end = true;
                        pQuit(3);
                        break;
                }
            }
            static void pResult() {
                System.out.println("\n"); // biar tetep misahin output walau `hasName == false`
                if (hasName)
                    System.out.println("Here is your result, " + fname + ":");
                System.out.println("Your weight      : " + Main.nice(weight) + " kg");
                System.out.println("Your height      : " + Main.nice(height) + " cm");
                System.out.printf("Your BMI index   : %.1f\n", bmi);
                System.out.println("\nYou're categorized as:\n" + category);
            }
            static void calcBMI(double w, double h) {
                bmi = w / (h * h * 0.0001); // pake 0.0001 karena unit nya centimeter
                if (bmi < 16) {
                    category = "Underweight (Severe thinness)";
                } else if (bmi <= 16.9) {
                    category = "Underweight (Moderate thinness)";
                } else if (bmi <= 18.4) {
                    category = "Underweight (Mild thinness)";
                } else if (bmi < 24.9) {
                    category = "Normal";
                } else if (bmi <= 29.9) {
                    category = "Overweight (Pre-obese)";
                } else if (bmi <= 34.9) {
                    category = "Obese (Class I)";
                } else if (bmi <= 39.9) {
                    category = "Obese (Class II)";
                } else {
                    category = "Obese (Class III)";
                }
            }
            static void pWelcome() {
                System.out.println("\nWelcome to the Volistic BMI Calculator!\n");
            }
            static void iName() {
                System.out.println("\nWhat is your full name? (blank to skip)");
                fname = bmiinput.nextLine();
            }
            static void iWeight() {
                boolean valid = false;
                while (!valid) { // minta terus input sampai input tersebut valid! (angka doang)
                    valid = true;
                    try {
                        System.out.println("\nWhat is your weight (kg)?");
                        weight = Double.parseDouble(bmiinput.nextLine());
                        if (weight > 635) {
                            System.out.println("I don't think you can be that fat.\n");
                            valid = false;
                        } else if (weight < 0.25) {
                            System.out.println("I don't think even a baby could be that light.\n");
                            valid = false;
                        }
                    } catch (Exception e) {
                        Main.pExcType("Something is wrong with your weight.");
                        valid = false;
                    }
                }
            }
            static void iHeight() {
                boolean valid = false;
                while (!valid) { // mirip yang di `iWeight()` (angka doang)
                    valid = true;
                    try {
                        System.out.println("\nWhat is your height (cm)?");
                        height = Double.parseDouble(bmiinput.nextLine());
                        if (height > 272) {
                            System.out.println(
                                    "Even the tallest man in the world, Robert Wadlow, doesn't reach that height.");
                            valid = false;
                        } else if (height < 25) {
                            System.out.println("That's kinda extremely small, what are you huh?");
                            valid = false;
                        }
                    } catch (Exception e) {
                        Main.pExcType("Something is wrong with your height.");
                        valid = false;
                    }
                }
            }
        }

        class CoffeeShop {
            private static String[] items = { "Americano ", "Latte     ", "Cappuccino", "Espresso  ", "Arabica   ",
                    "Mochaccino", "Tiramisu  ", "Robusta   ", "Liberica  ", "Excelso   ", "Affogato  " };
            private static int[] prices = { 21, 24, 29, 19, 23, 33, 33, 30, 66, 95, 34 };
            private static int[] orders = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
            static boolean csrun = true, end = false;
            static Scanner csinput = new Scanner(System.in);

            // getter
            static int getItemsCount() {
                return items.length;
            }
            static String getItems(int index) {
                return items[index];
            }
            static int getPrices(int index) {
                return prices[index];
            }
            static int getOrdersCount() {
                return orders.length;
            }

            static void command(String command) {
                switch (command) {
                    case "menu":
                        pMenu();
                        break;
                    case "add":
                        iAdd();
                        break;
                    case "rm":
                    case "remove":
                        iRemove();
                        break;
                    case "ls":
                    case "list":
                        Main.clear();
                        list();
                        break;
                    case "rst":
                    case "reset":
                        resetList();
                        break;
                    case "fin":
                    case "done":
                        done();
                        break;
                    case "quit":
                        CoffeeShop.resetVar();
                        pQuit(3);
                        CoffeeShop.end = true;
                        break;
                    case "help":
                        Main.clear();
                        help();
                        break;
                    default:
                        Main.clear();
                        Main.pExcType("Command unknown.");
                        System.out.println("Type 'help' to display the help menu");
                        break;
                }
            }
            static void list() {
                double total = 0, net = 0;
                boolean bdiscount = false, isEmpty = true;
                ;
                for (int i = 0; i < getOrdersCount(); i++) {
                    if (orders[i] != 0) {
                        isEmpty = false;
                    }
                }
                if (isEmpty) {
                    System.out.println("Your list is empty, use 'add' to add an item.");
                } else {
                    for (int i = 0; i < getItemsCount(); i++) {
                        if (orders[i] != 0) {
                            System.out.println((i + 1) + ". (" + orders[i] + " items) " + items[i] + " = ("
                                    + (orders[i] * getPrices(i)) + "K)");
                            total += (orders[i] * prices[i]);
                        }
                    }
                    System.out.printf("\nTotal price                = %,.0fK\n", total);
                    if (total >= 100) {
                        bdiscount = true;
                    }
                    if (bdiscount) {
                        net = (total * 0.85);
                    } else {
                        net = (int) total;
                    }
                    System.out.println("Discount (15%)             = " + bdiscount);
                    if (net == (int) net) {
                        System.out.println("Payment                    = " + (int) net + "K");
                    } else {
                        System.out.printf("Payment                    = %,.2fK\n", net);
                    }
                }
            }
            static void help() {
                System.out.println(
                        "\nAvailable commands: \n'menu'      : show the items menu.\n'add'       : add an item and its amount to the order list.\n'remove'    : remove an amount of item from the order list\n'list'      : display your current orders list.\n'reset'     : discard the order list and make a new one.\n'done'      : finish choosing and purchase your order list.\n'quit'      : simply quit the program and goes back to Volistic Main menu.\n'help'      : show this help menu.\n");
            }
            static void run() {
                pWelcome();
                csrun = true;
                end = false;
                while (CoffeeShop.csrun) {
                    CoffeeShop.csrun = false;
                    try {
                        Main.hr();
                        System.out.println("\nEnter your command: ");
                        command(csinput.nextLine());
                        if (CoffeeShop.end == false) {
                            CoffeeShop.csrun = true;
                        }
                    } catch (Exception e) {
                        Main.pExcType(
                                "You're not supposed to see this message.\nIf you do, report with a screenshot here: deffreus (Discord)");
                        csinput.nextLine();
                        CoffeeShop.csrun = true;
                    }
                }
            }
            static void pMenu() {
                Main.clear();
                System.out.println("\nAvailable items:");
                System.out.println(" 0 = (Cancel current command)");
                String space;
                for (int i = 0; i < getItemsCount(); i++) {
                    if (i < 9) {
                        space = " ";
                    } else {
                        space = "";
                    }
                    System.out.println(space + (i + 1) + " = " + getItems(i) + "         (" + prices[i] + "K)");
                }
                System.out.println("\n");
            }
            static void iAdd() {
                Main.clear();
                pMenu();
                boolean bindex = true, bcount = true;
                ;
                int index = 0;
                long count = 0;
                while (bindex) {
                    bindex = false;
                    try {
                        System.out.println("\nEnter the index number of the item you want to add: ");
                        index = csinput.nextInt();
                        csinput.nextLine();
                        if (index < 0 || index > getItemsCount()) {
                            System.out.println("(OUT OF RANGE) Please enter an integer between 0 to " + getItemsCount()
                                    + " (Inclusive) !");
                            bindex = true;
                        }
                    } catch (Exception e) {
                        Main.pExcType(
                                "Please enter an integer number between 0 to " + getItemsCount() + " (Inclusive) !");
                        csinput.nextLine();
                        bindex = true;
                    }
                }
                if (index == 0) {
                    System.out.println("Cancelling adding item...");
                } else {
                    System.out
                            .println("Selecting : " + Main.nospace(items[index - 1]) + " (" + prices[index - 1] + "K)");
                    while (bcount) {
                        bcount = false;
                        try {
                            System.out.println("\nHow many do you want to order?");
                            count = csinput.nextLong();
                            csinput.nextLine();
                            if (count < 0) {
                                System.out.println("(OUT OF RANGE) Please enter a real integer number!");
                                bcount = true;
                            }
                        } catch (Exception e) {
                            Main.pExcType("Please enter a real integer number!");
                            csinput.nextLine();
                            bcount = true;

                        }
                    }
                    if (count == 0) {
                        Main.clear();
                        System.out.println("Cancelling adding item...");
                    } else {
                        Main.clear();
                        orders[index - 1] += count;
                        System.out.println("Your order list is updated successfully.\n");
                    }
                }
            }
            static void iRemove() {
                Main.clear();
                boolean isEmpty = true;
                int orderCount = 0, lastIndex = 0;
                for (int i = 0; i < getOrdersCount(); i++) {
                    if (orders[i] != 0) {
                        orderCount++;
                        isEmpty = false;
                        lastIndex = i + 1;
                    }
                }
                if (isEmpty == true) {
                    System.out.println("Your list is empty, use 'add' to add an item.");
                } else {
                    System.out.println("Your current order list: ");
                    list();
                    boolean bindex = true, bcount = true;
                    ;
                    int index = 0;
                    long count = 0;
                    while (bindex) {
                        bindex = false;
                        try {
                            if (orderCount != 1) {
                                System.out.println("\nEnter the index number of the item you want to remove: ");
                                index = csinput.nextInt();
                                csinput.nextLine();
                                if (index < 0 || index > getItemsCount()) {
                                    System.out.println("(OUT OF RANGE) Please enter an integer between 0 to "
                                            + getItemsCount() + " (Inclusive) !");
                                    bindex = true;
                                } else if (orders[index - 1] == 0) {
                                    System.out.println(Main.nospace(items[index - 1]) + " is not on your order list.");
                                }
                            } else {
                                index = lastIndex;
                            }
                        } catch (Exception e) {
                            Main.pExcType("Please enter an integer between 0 to " + getItemsCount() + " (Inclusive) !");
                            csinput.nextLine();
                            bindex = true;
                        }
                    }
                    if (index == 0 || orders[index - 1] == 0) {
                        System.out.println("Cancelling removing item...");
                    } else {
                        if (orderCount == 1) {
                            System.out.println("\nSelecting : " + Main.nospace(items[index - 1]) + " ("
                                    + prices[index - 1] + "K)");
                        } else {
                            System.out.println(
                                    "Selecting : " + Main.nospace(items[index - 1]) + " (" + prices[index - 1] + "K)");
                        }
                        while (bcount) {
                            bcount = false;
                            try {
                                if (orderCount != 1) {
                                    System.out.println("\nHow many do you want to remove? (Type '0' to cancel)");
                                } else {
                                    System.out.println("\nHow many " + Main.nospace(items[index - 1])
                                            + " do you want to remove? (Type '0' to cancel)");
                                }
                                count = csinput.nextLong();
                                csinput.nextLine();
                                if (count < 0) {
                                    System.out.println("(OUT OF RANGE) Please enter a non-negative integer number!");
                                    bcount = true;
                                }
                            } catch (Exception e) {
                                Main.pExcType("Please enter a non-negative integer number!");
                                csinput.nextLine();
                                bcount = true;

                            }
                        }
                        if (count == 0) {
                            System.out.println("Cancelling removing item...");
                        } else if (count >= orders[index - 1]) {
                            System.out.println("Successfullly removed all " + Main.nospace(items[index - 1]) + ".");
                            orders[index - 1] = 0;
                        } else {
                            System.out.println(
                                    "Successfully removed " + count + " " + Main.nospace(items[index - 1]) + ".");
                            orders[index - 1] -= count;
                        }
                    }
                }
            }
            static void resetList() {
                Main.clear();
                for (int i = 0; i < getOrdersCount(); i++) {
                    orders[i] = 0;
                }
                System.out.println("Your order list have been discarded!");
            }
            static void done() {
                Main.clear();
                boolean listIsEmpty = true;
                for (int i = 0; i < getItemsCount(); i++) {
                    if (orders[i] != 0) {
                        listIsEmpty = false;
                        break;
                    }
                }
                if (listIsEmpty) {
                    System.out.println("Your list is empty.");
                    System.out.println("\nQuit purchase? (y/n): ");
                    switch (csinput.nextLine()) {
                        case "":
                        case "Y":
                        case "Yes":
                        case "yes":
                        case "ye":
                        case "Ye":
                        case "y":
                            System.out.println("You haven't buy anything for now...\nCome back later!");
                            CoffeeShop.csrun = false;
                            CoffeeShop.end = true;
                            pQuit(3);
                            Main.hr();
                            Main.hr();
                            break;
                        default:
                            break;
                    }
                } else {
                    System.out.println("Your order will be :");
                    list();
                    System.out.println("\nConfirm purchase? (y/n): ");
                    switch (csinput.nextLine()) {
                        case "":
                        case "Y":
                        case "Yes":
                        case "yes":
                        case "ye":
                        case "Ye":
                        case "y":
                            System.out.println("Purchase completed!\nEnjoy your coffee!");
                            CoffeeShop.csrun = false;
                            CoffeeShop.end = true;
                            CoffeeShop.resetVar();
                            System.out.println("\n\n" + //
                            "                ██    ██    ██                                    \n" + //
                            "              ██      ██  ██                                      \n" + //
                            "              ██    ██    ██                                      \n" + //
                            "                ██  ██      ██                                    \n" + //
                            "                ██    ██    ██                                    \n" + //
                            "                                                                  \n" + //
                            "            ████████████████████                                  \n" + //
                            "            ██                ██████                              \n" + //
                            "            ██                ██  ██                              \n" + //
                            "            ██                ██  ██                              \n" + //
                            "            ██                ██████                              \n" + //
                            "              ██            ██                                    \n" + //
                            "          ████████████████████████                                \n" + //
                            "          ██                    ██                                \n" + //
                            "            ████████████████████                                  \n");
                            CoffeeShop.pQuit(5);
                            break;
                        default:
                            System.out.println("Purchase cancelled, going back to listing your order!");
                    }
                }
            }
            static void pWelcome() {
                Main.clear();
                Main.hr();
                System.out.println(
                        "\nWelcome to the Volistic's Coffee Shop!\n\n(If your total purchase reach Rp. 100K, you will get a 15% discount!)\nWhat will be your order?\n");
                help();
            }
            static void resetVar() {
                for (int i = 0; i < getItemsCount(); i++) {
                    CoffeeShop.orders[i] = 0;
                }
            }
            static void pQuit(int duration) {
                System.out.println("\nQuitting in:");
                for (int i = duration; i > 0; i--) {
                    System.out.println(i + "...");
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        System.out.println("Something went wrong...");
                    }
                }
            }
        }

        class Tristan {
            static Scanner tristaninput = new Scanner(System.in);
            static boolean tristanIsRunning, tristanIsEnded;
            static int jam_tidur, menit_tidur, jam_bangun, menit_bangun;

            static void run() {
                tristanIsRunning = true;
                tristanIsEnded = false;
                while (tristanIsRunning) {
                    tristanIsRunning = false;
                    try {
                        Main.clear();
                        pWelcome();
                        iJamTidur();
                        iJamBangun();
                        pRes();
                        iQuit();
                        if (tristanIsEnded == false) {
                            tristanIsRunning = true;
                        }
                    } catch (Exception e) {
                        Main.pExcType(ansiColor.RED + "CALCULATOR ERROR." + ansiColor.RESET);
                    }
                }
            }
            static void pWelcome() {
                Main.hr();
                System.out.println("\nWelcome to the Tristan's Sleep Duration Calculator!\n");
                System.out.println("Write time in the 24 hour format!");
                System.out.println("Write '24:00' as '00:00' !");
                System.out.println("\n(Tristan gave the idea, and Deffreus made the code)\n");
                Main.hr();
            }
            static void iJamTidur() {
                boolean inputIsValid = false;
                while (!inputIsValid) {
                    List<String> waktuTidur = new ArrayList<>();
                    try {
                        inputIsValid = true;
                        System.out.println("\nAt what time did you slept? (e.g 22:15): ");
                        String[] rawWaktuTidur = tristaninput.nextLine().split(":", 0);
                        for(String i: rawWaktuTidur) {waktuTidur.add(i);}
                        jam_tidur = Integer.parseInt(waktuTidur.get(0));
                        menit_tidur = Integer.parseInt(waktuTidur.get(1));
                        // check validity:
                        if((jam_tidur >= 24 || jam_tidur < 0) || (menit_tidur < 0 || menit_tidur >= 60) || rawWaktuTidur.length > 2) {
                            inputIsValid = false;
                            Main.pExcType("That's not a valid time!");
                        }
                    } catch (Exception e) {
                        Main.pExcType("Please enter the hour and minutes in a valid format: HH:MM");
                        inputIsValid = false;
                        waktuTidur.clear();
                    }
                }
            }
            static void iJamBangun() {
                boolean inputIsValid = false;
                while (!inputIsValid) {
                    List<String> waktuBangun = new ArrayList<>();
                    try {
                        inputIsValid = true;
                        System.out.println("\nAt what time did you wake up? (e.g 03:50): ");
                        String[] rawWaktuBangun = tristaninput.nextLine().split(":", 0);
                        for(String i: rawWaktuBangun) {waktuBangun.add(i);}
                        jam_bangun = Integer.parseInt(waktuBangun.get(0));
                        menit_bangun = Integer.parseInt(waktuBangun.get(1));
                        // check validity:
                        if((jam_bangun >= 24 || jam_bangun < 0) || (menit_bangun < 0 || menit_bangun >= 60) || rawWaktuBangun.length > 2) {
                            inputIsValid = false; Main.pExcType("That's not a valid time!");
                        }
                    } catch (Exception e) {
                        Main.pExcType("Please enter the hour and minutes in a valid format: HH:MM");
                        inputIsValid = false;
                        waktuBangun.clear();
                    }
                }
            }
            static void pRes() {
                // kalkulasi durasi tidur:
                int tidur = jam_tidur*60+menit_tidur; int bangun = jam_bangun*60+menit_bangun;
                if(tidur > bangun) {tidur -= (24*60);}
                int hours = (bangun-tidur)/60; int minutes = (bangun-tidur)%60;

                // output formatting!
                // ketika tidur sama dengan bangun:
                if(hours+minutes == 0) {System.out.printf("\nYou sleep in less than a minute or what? :O\n");}
                // ketika tidur dibawah satu jam:
                else if(hours == 0 && minutes != 0) {
                    if(minutes == 1) {System.out.printf("\nYou've slept for a minute! XD\n");}
                    else {System.out.printf("\nYou've slept for %d minutes! :v\n", minutes);}
                }
                // ketika tidur tepat N jam:
                else if(minutes == 0 && hours != 0) {
                    if(hours == 1) System.out.printf("\nYou've slept for an hour! :p\n");
                    else {System.out.printf("\nYou've slept for %d hours! :>\n", hours);}
                } 
                // output format jam dan menit:
                else {
                    if(hours == 1 && minutes == 1) {System.out.printf("\nYou've slept for an hour and a minute! o_o\n");}
                    else if(hours == 1) {System.out.printf("\nYou've slept for an hours and %d minutes! :)\n", minutes);}
                    else if(minutes == 1) {System.out.printf("\nYou've slept for %d hours and a minute! c:\n", hours);}
                    else System.out.printf("\nYou slept for " + hours + " hours and " + minutes + " minutes! :D\n");
                }
            }
            static void iQuit() {
                String opt;
                boolean valid = false;
                while (valid != true) {
                    System.out.println("\nDo you want calculate again? (Y/n)");
                    opt = tristaninput.nextLine();
                    switch (opt) {
                        case "Y":
                        case "y":
                        case "Yes":
                        case "yes":
                        case "YES":
                        case "":
                            valid = true;
                            tristanIsEnded = false;
                            break;
                        case "n":
                        case "N":
                        case "No":
                        case "no":
                        case "NO":
                            valid = true;
                            tristanIsEnded = true;
                            System.out.println("\nThank you for using the Sleep Duration Calculator!! :D");
                            pQuit(3);
                            break;
                        default:
                            System.out.println("Invalid input!");
                    }
                }
            }
            static void pQuit(int second) {
                System.out.println("\nQuitting in:");
                for(int i = second; i > 0; i--) {
                    System.out.println(i + "...");
                    try {
                        Thread.sleep(1000);
                    } catch(Exception e) {
                        Main.pExcType("Thread sleep exception! Dev's fault, not yours!");
                    }
                }
            }
        }

        class Anton { // mau bikin morse code translator katanya
            static Scanner BAPAKMU = new Scanner(System.in); // Amrul lo yang namain
            static String dictionary[][] = {{"A" ,"B"   ,"C"   ,"D"  ,"E","F"   ,"G"  ,"H"   ,"I" ,"J"   ,"K"  ,"L"   ,"M" ,"N" ,"O"  ,"P"   ,"Q"   ,"R"  ,"S"  ,"T","U"  ,"V"   ,"W"  ,"X"   ,"Y"   ,"Z"   }, 
                                            {".-","_...","-.-.","-..",".","..-.","--.","....","..",".---","-.-",".-..","--","-.","---",".--.","--.-",".-.","...","-","..-","...-",".--","-..-","-.--","--.."} };
            static boolean isEnded, isRunning;
            static String input, result;
            static int mode;
            static void run() {;
                isRunning = true;
                isEnded = false;
                while(isRunning) {
                    input = "";
                    Main.clear();
                    pWelcome();
                    iMode();
                    iInput();
                    if(mode == 1) {LetterToMorse();}
                    else if(mode == 2) {MorseToLetter();};
                    pResult();
                    iQuit();
                    if(isEnded) {isRunning = false;}
                }
            }
            static void pWelcome() {
                Main.hr();
                System.out.println("\nWelcome to Anton's Morse Code Translator!");
                System.out.println("\"Thanks to Amrul for the program idea!\" — Deffreus");
                System.out.println("\n*Note: This program DO NOT accept input that's not alphabet or morse code!\n");
                Main.hr();
            }
            static void iMode() {
                boolean inputIsValid = false;
                while(!inputIsValid) {
                    System.out.println("\nSelect translation mode\n1 = Alphabet --> Morse Code\n2 = Morse Code --> Alphabet\n(Enter the number):");
                    try {
                        mode = Integer.parseInt(BAPAKMU.nextLine());
                        switch(mode) {
                            case 1:
                                inputIsValid = true;
                                break;
                            case 2:
                                inputIsValid = true;
                                break;
                            default:
                                Main.pExcType("Please enter either '1' or '2'!");
                                break;
                        }
                    } 
                    catch(Exception e) {
                        Main.pExcType("Please enter either '1' or '2'!");
                    }
                }
            }
            static void iInput() {
                System.out.println("\nType what you want to be translated:");
                if(mode == 1) {System.out.println("(Alphabets):");} else {System.out.println("(Morse code):");}
                input = (BAPAKMU.nextLine()).toUpperCase();
            }
            static void LetterToMorse() {
                result = "";
                char[] charsOfInput = input.toCharArray();
                for(int i = 0; i < charsOfInput.length; i++) {
                    for(int j = 0; j < dictionary[0].length; j++) {
                        if(String.valueOf(charsOfInput[i]).equals(dictionary[0][j])) {
                            result = result.concat(dictionary[1][j] + " "); 
                            break;
                        }
                    }
                }
                System.out.println("\n(Morse code):");
            }
            static void MorseToLetter() {
                result = "";
                String currentMorseLetter[] = input.split(" ", 0);
                for(int i = 0; i < currentMorseLetter.length; i++) {
                    for(int j = 0; j < dictionary[1].length; j++) {
                        if(currentMorseLetter[i].equals(dictionary[1][j])) {
                            // result.concat(dictionary[0][j]); // idk why, but this just doesn't work
                            result = result + dictionary[0][j];
                            break;
                        }
                    }
                }
                System.out.println("\n(Alphabets):"); 
            }
            static void pResult() {
                System.out.println(result);
            }
            static void iQuit() {
                System.out.println("\nDo you want to translate again?\n(Y/n):");
                boolean inputIsValid = false;
                while(!inputIsValid) {
                    String quit = BAPAKMU.nextLine();
                    switch(quit) {
                        case "Y":
                        case "y":
                        case "Yes":
                        case "yes":
                        case "YES":
                        case "":
                            inputIsValid = true;
                            isEnded = false;
                            break;
                        case "n":
                        case "N":
                        case "No":
                        case "no":
                        case "NO":
                            inputIsValid = true;
                            isEnded = true;
                            pQuit(3);
                            break;
                        default:
                            Main.pExcType("Invalid: response unknown.");
                            break;
                    }
                }
            }
            static void pQuit(int duration) {
                System.out.println("\nQuitting in:");
                for (int i = duration; i > 0; i--) {
                    System.out.println(i + "...");
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        System.out.println("Something went wrong...");
                    }
                } 
            }
        }

        boolean run = true;
        while (run) {
            try {
                Main.clear();
                Main.pBanner();
                Main.pQuit();
                Main.pMainMenu();
                System.out.println("\nSelect the program you want to run: ");
                String chosenProgram = input.nextLine();
                switch (chosenProgram) {
                    case "Coffee Shop":
                    case "1":
                        CoffeeShop.run();
                        break;
                    case "BMI":
                    case "BMI Calculator":
                    case "2":
                        BMICalculator.run();
                        break;
                    case "3":
                        TwoVarCalculator.run();
                        break;
                    case "4":
                    case "Tristan":
                    case "Tristan's Sleep Duration Calculator":
                        Tristan.run();
                        break;
                    case "5":
                    case "Anton":
                    case "Morse":
                    case "morse":
                        Anton.run();
                        break;
                    case "exit":
                    case "quit":
                        Main.quit(3);
                        break;
                }
            } catch (Exception e) {
                Main.pExcType(
                        "Something went wrong. Please report immediately to: deffreus (Discord). Sorry for the inconvenience T-T");
                if (input.hasNextLine()) {
                    input.nextLine();
                }
                try {
                    Thread.sleep(2000);
                } catch (Exception ee) {
                    Main.pExcType("Thread sleep error.");
                }
            }
        }
        input.close();
    }
}
